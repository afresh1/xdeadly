#!/usr/bin/env perl
use Mojolicious::Lite;

use Mojo::Util qw(url_escape slurp);

# Documentation browser under "/perldoc"
plugin 'PODRenderer';

my $data_dir = 'data';
my $num_front_page_stories = 5;

helper usernavbar => sub {
    my ($self) = @_;
    return 'anon_navbar';
};

helper stories  => sub { return shift->_posts };
helper _posts  => sub {
    my ($self, $dir) = @_;
    $dir = app->home->rel_dir( join '/', $data_dir, $dir || '' );

    opendir my $dh, $dir or die "Couldn't opendir $dir: $!";
    my @posts
        = sort { $b <=> $a } grep { /^\d+$/ && -d "$dir/$_" } readdir $dh;
    close $dh;

    return @posts;
};

helper story_details => sub {
    my ( $self, $sid ) = @_;

    my $file = "$sid/article";
    my %story = $self->load_post($file);

    $story{has_more} = -e app->home->rel_file("$data_dir/$file.more");
    $story{more} = '';

    if ($story{name} and $story{href}) {
        my $href = url_escape($story{href});
        $story{name} = "<a href='$href'>$story{name}</a>";
    }

    $story{department} = $story{dept};
    $story{sid}        = $sid;
    $story{topicimg}   = $self->topicimg($story{topic});
    $story{topicquery} = $story{topic};

    return %story;
};

helper load_post => sub {
    my ($self, $file) = @_;
    $file = app->home->rel_file("$data_dir/$file");
    return unless -e $file;

    open my $fh, '<', $file or die "Couldn't open $file: $!";

    my %post = (
        file     => $file,
        comments => [],
        body     => '',
    );

    my $in_body = 0;
    while (<$fh>) {
        chomp;
        if ($in_body) {
            $post{body} .= $_;
        }
        elsif (/^$/) {
            $in_body = 1;
        }
        else {
            my ($key, $value) = split /:\s*/, $_, 2;
            $post{$key} = $value;
        }
    }

    $post{date} .= ' (GMT)' if $post{date};

    close $fh;
    return %post;
};

helper story_more => sub {
    my ( $self, $sid ) = @_;

    my $file = app->home->rel_file("$data_dir/$sid/article.more");
    return unless -e $file;
    return slurp($file);
};

helper comments => sub {
    my ( $self, $sid ) = @_;
    return $self->load_comments( $sid );
};

helper load_comments => sub {
    my ($self, $dir) = @_;

    return
        map { $_, @{ $_->{comments} } }
        map +{ $self->load_comment("$dir/$_") }, $self->_posts($dir);
};

helper load_comment => sub {
    my ($self, $dir) = @_;

    my %comment = $self->load_post("$dir/comment");
    $comment{cid}      = $dir;
    $comment{comments} = [ $self->load_comments( $dir ) ];

    return %comment;
};

helper topicimg => sub {
    my ( $self, $topic ) = @_;

    my %topicext;

    $topicext{$_} = 'gif' for qw(
        oreilly_weasel
        topicbl
        topicbsd
        topiccrypto
        topiceditorial
        topicmail
        topicopenbsd
        topicopenssh
        topicports
    );

    $topicext{$_} = 'png' for qw(
        topic30
        topic30
        topicpf2
        topicreadme
        topicnda
        topicsparc
    );

    my $ext = $topicext{$topic} || 'jpg';

    return "$topic.$ext";
};

helper mode => sub {
    my ($self) = @_;
    my %modes = map { $_ => 1 } qw( expanded flat );

    return $modes{ $self->param('mode') };
};

helper comment_template => sub {
    return shift->mode ? 'article_comment' : 'article_comment_collapsed';
};

under sub {
    my $self = shift;

    $self->stash( $_ => "XXX FIXME [$_] XXX" ) for qw(
        baseurl
        captcha
        category
        checked_comments
        checked_poll
        checked_type_html
        checked_type_plain
        checked_verbose
        cksum
        date
        dept
        editors
        email
        errata
        excerpt
        form
        href
        indent
        items
        link
        modsum
        modcount
        name
        navigation
        new
        pid
        poll
        pubdate
        query
        rcsid
        related
        results
        selected_method_and
        selected_method_boolean
        selected_method_or
        selected_sort_revscore
        selected_sort_revtime
        selected_sort_revtitle
        selected_sort_score
        selected_sort_time
        selected_sort_title
        selected_topic_oreilly_weasel
        selected_topic_topic27
        selected_topic_topic30
        selected_topic_topic31
        selected_topic_topic34
        selected_topic_topic35
        selected_topic_topic36
        selected_topic_topic37
        selected_topic_topic38
        selected_topic_topic39
        selected_topic_topic40
        selected_topic_topic42
        selected_topic_topic43
        selected_topic_topicaskobsdj
        selected_topic_topicblog
        selected_topic_topicbsd
        selected_topic_topicbsdtalk
        selected_topic_topicconf
        selected_topic_topiccrypto
        selected_topic_topiceditorial
        selected_topic_topichardware
        selected_topic_topicjava
        selected_topic_topicmail
        selected_topic_topicmobile
        selected_topic_topicnda
        selected_topic_topicnetworking
        selected_topic_topicnews
        selected_topic_topicopenbsd
        selected_topic_topicopenssh
        selected_topic_topicpf2
        selected_topic_topicports
        selected_topic_topicreadme
        selected_topic_topicsecurity
        selected_topic_topicsparc
        selected_topic_topicsysadmin
        subject
        submission
        thres
        time
        title
        unindent
        usergroup
        vuxml
        weeklist
        yesterday
    );

    return 1;
};

get '/' => sub {
    my ($self) = @_;

    my @stories;
    foreach my $sid ( $self->stories ) {
        my %story = $self->story_details($sid);
        if ( $story{has_more} ) {
            $story{more}
                = 'Read '
                . $self->link_to( more => "/article/$story{sid}" )
                . ' . . .';
        }
        push @stories, \%story;
        last if @stories == $num_front_page_stories;
    }
    $self->stash( front_stories => \@stories );
} => 'front';

get '/about';
get '/errata';
get '/search';

get '/article/:sid' => sub {
    my ($self) = @_;
    my $sid = $self->param('sid');

    $self->stash(
        $self->story_details($sid),
        more     => $self->story_more($sid),
        comments => [ $self->comments($sid) ],
    );
} => 'article';


get '/rss';
get '/submit';
post '/submit';

get '/deauth';
get '/login';
post '/login';

get '/register';
post '/register';

get '/prefs';
post '/prefs';

get '/submissions';
post '/edit';

app->start;
