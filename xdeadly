#!/usr/bin/env perl
use Mojolicious::Lite;

# Copyright (c) 2013 Andrew Fresh <andrew@afresh1.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use Mojo::Util qw(url_escape slurp);
use List::Util qw(sum);
use Time::Local qw(timegm);

use lib app->home->rel_dir('lib');
use XDeadly::Article;
use XDeadly::Comment;

use Digest::SHA1;

# Documentation browser under "/perldoc"
plugin 'PODRenderer';

my $config = plugin Config => default => {
    data_dir => 'data',
    auth_dir => 'auth',
    #secret   => 'pleasepickasecret',
    num_front_page_stories => 5,
    num_older_stories      => 5,
    num_rss_stories        => 10,
};

helper stories =>
    sub { @{ XDeadly::Article->articles( $config->{data_dir} ) } };
helper story => sub {
    my ( $self, $id ) = @_;

    if ( $id =~ m{/} ) {
        return XDeadly::Comment->new(
            data_dir => $config->{data_dir},
            id       => $id,
        );
    }
    else {
        return XDeadly::Article->new(
            data_dir => $config->{data_dir},
            id       => $id,
        );
    }
};

helper link_to_post => sub {
    my ( $self, $post ) = @_;
    my $title = $post->subject;
    return $self->link_to( $title => $self->url_with( "/article/$post" ) );
};

helper link_to_author => sub {
    my ( $self, $post ) = @_;

    my $title = $post->name;
    my $href  = $post->href;
    return $title unless $href;

    $href = "http://$href" unless $href =~ m{://}; # because

    return $self->link_to( $title => $href );
};

helper is_new => sub {
    my ($self, $post) = @_;
    return 'XXX FIXME [is_new] XXX';
};

helper usernavbar => sub {
    my ($self) = @_;
    return 'anon_navbar';
};

helper weeklist => sub {
    my ($self) = @_;

    my $made_front_page = $config->{num_front_page_stories};
    my $made_weeklist   = $config->{num_older_stories};

    # We actually just ignore invalid dates and plan for them
    # to be "today"
    my $validation = $self->validation;
    $validation->optional('date')->like(qr/^\d{8}$/)->is_valid;
    my $date = $validation->param('date') || '';

    my $epoch = time;
    if ($date) {
        my ($year, $mon, $mday) = $date =~ /^(\d{4})(\d{2})(\d{2})$/;
        $epoch = timegm( 59, 59, 23, $mday, $mon - 1, $year );
    }

    my $to_date = sub {
        my ($epoch) = @_;
        my ( $year, $mon, $mday ) = ( gmtime($epoch) )[ 5, 4, 3 ];
        $year += 1900;
        $mon++;
        return sprintf '%04d%02d%02d', $year, $mon, $mday;
    };
    $self->stash->{today}     = $to_date->($epoch);
    $self->stash->{yesterday} = $to_date->( $epoch - 86400 );

    my $last_shortdate = '';
    my @stories;
    foreach my $story ( $self->stories ) {
        next if $story->_epoch > $epoch;
        next if $made_front_page-- > 0;

        if ( $story->short_date ne $last_shortdate ) {
            $last_shortdate = $story->short_date;
            last unless $made_weeklist--;
        }

        push @stories, $story;
    }

    return @stories;
};

helper thread_mode => sub {
    my ($self) = @_;
    my %thread_modes = map { $_ => $_ } qw( expanded flat );

    return $thread_modes{ $self->param('thread_mode') || 'collapsed' } || '';
};

helper comment_template => sub {
    return
        shift->thread_mode ? 'article_comment' : 'article_comment_collapsed';
};

helper level_diff => sub {
    my ($self, $current, $base) = @_;

    return $current->level unless $base;

    my $diff = $current->level - $base->level;
    $diff = 0 if $diff < 0;

    return $diff;
};

helper _do_indent => sub {
    my ($self, $tag, $current, $base) = @_;
    return '' if $self->thread_mode eq 'flat';
    return $tag x $self->level_diff( $current, $base );
};
helper indent => sub { shift->_do_indent('<ul>', @_) };
helper unindent => sub {shift->_do_indent('</ul>', @_) };

helper navigation => sub {
    my ( $self, $sid, $cid) = @_;

    my @links;

    my $thread_mode = $self->thread_mode;
    my $href = $self->url_with("/article/$sid");

    if ( defined $cid ) {
        return (
            {   href  => $href->clone->path("/article/$cid"),
                title => 'Show Thread',
            },
            {   href  => $href->clone->path("/reply/$cid"),
                title => 'Reply to this comment',
            },
            # Mod Up/Down
        );
    }

    my $story = $self->story( $sid );

    unless ($story->is_article) {
        my $parent = $story->parent;
        my $title = $parent->subject || '';

        push @links, {
            href  => $self->url_with("/article/$parent"),
            title => "Up: $title",
        };
    }

    push @links, {
        href  => $href->clone->query( thread_mode => 'flat' ),
        title => 'Flattened',
    } unless $thread_mode eq 'flat';

    push @links, {
        href  => $href->clone->query( thread_mode => 'expanded' ),
        title => 'Expanded',
    } unless $thread_mode eq 'expanded';

# $href->clone->query->remove('thread_mode') returns a Mojo::Parameters object
    my $collapsed_href = $href->clone;
    $collapsed_href->query->remove('thread_mode');
    push @links, {
        href  => $collapsed_href,
        title => 'Collapsed',
    } if $thread_mode;

    if ( $self->current_route('front') ) {
        my $count         = @{ $story->comments };
        my $s             = $count eq 1 ? '' : 's';
        my $latest_change = $self->human_time( $story->latest_change );

        unshift @links, {
            href => $href->clone,
            title => "$count comment$s $latest_change ago",
        };
    }
    elsif ( $self->current_route('article') ) {
        my $seen_myself = 0;
        my $prev;
        my $next;

        my @posts
            = $story->is_article
            ? $self->stories
            : reverse @{ $story->article->comments };

        foreach my $current (@posts) {
            if ($current eq $sid) {
                $seen_myself = 1;
                next;
            }
            elsif ($seen_myself) {
                $prev = $current;
                last;
            }
            $next = $current;
        }

        unshift @links, {
            href =>  $self->url_with("/article/$prev"),
            title => '<< ' . $prev->subject,
        } if $prev;

        push @links, {
            href =>  $self->url_with("/article/$next"),
            title => $next->subject . ' >>',
        } if $next;
    }

    return @links;
};

helper human_time => sub {
    my ( $self, $epoch ) = @_;

    my $name = 'seconds';
    my %time = ( $name => scalar time - $epoch );

    foreach (
        { name => 'minutes', qty => 60 },
        { name => 'hours',   qty => 60 },
        { name => 'days',    qty => 24 },
    ) {
        $time{ $_->{name} } = int $time{$name} / $_->{qty};
        $time{$name}        = int $time{$name} % $_->{qty};
        $name               = $_->{name};
    }

    my $time = '';
    $time = "$time{days}d" if $time{days};
    $time .= sprintf "%d:%02d", $time{hours}, $time{minutes}
        if $time{days} < 5;

    return $time;
};

helper users => sub {
    my ( $self ) = @_;
    my $user_file = app->home->rel_file("$config->{auth_dir}/xdeadly.org.passwd");

    my @keys = qw( user group password realname email comment );

    my %users;

    open my $fh, '<', $user_file or die "Couldn't open $user_file: $!";
    while (<$fh>) {
        chomp;
        next if /^\s*\#/;
        my %user;
        @user{@keys} = split /;/;
        $users{ $user{user} } = \%user;
    }
    close $fh;

    return \%users;
};

helper user_hash => sub {
    my ($self, $password) = @_;

    my $sha1 = Digest::SHA1->new;
    $sha1->add( $config->{secret} );
    $sha1->add( $password );

    return $sha1->hexdigest;
};

under sub {
    my $self = shift;

    $self->stash( $_ => "XXX FIXME [$_] XXX" ) for qw(
        baseurl
        captcha
        category
        checked_comments
        checked_poll
        checked_type_html
        checked_type_plain
        checked_verbose
        cksum
        date
        dept
        editors
        email
        errata
        excerpt
        form
        href
        items
        link
        name
        navigation
        new
        pid
        poll
        pubdate
        query
        rcsid
        related
        results
        selected_method_and
        selected_method_boolean
        selected_method_or
        selected_sort_revscore
        selected_sort_revtime
        selected_sort_revtitle
        selected_sort_score
        selected_sort_time
        selected_sort_title
        selected_topic_oreilly_weasel
        selected_topic_topic27
        selected_topic_topic30
        selected_topic_topic31
        selected_topic_topic34
        selected_topic_topic35
        selected_topic_topic36
        selected_topic_topic37
        selected_topic_topic38
        selected_topic_topic39
        selected_topic_topic40
        selected_topic_topic42
        selected_topic_topic43
        selected_topic_topicaskobsdj
        selected_topic_topicblog
        selected_topic_topicbsd
        selected_topic_topicbsdtalk
        selected_topic_topicconf
        selected_topic_topiccrypto
        selected_topic_topiceditorial
        selected_topic_topichardware
        selected_topic_topicjava
        selected_topic_topicmail
        selected_topic_topicmobile
        selected_topic_topicnda
        selected_topic_topicnetworking
        selected_topic_topicnews
        selected_topic_topicopenbsd
        selected_topic_topicopenssh
        selected_topic_topicpf2
        selected_topic_topicports
        selected_topic_topicreadme
        selected_topic_topicsecurity
        selected_topic_topicsparc
        selected_topic_topicsysadmin
        subject
        submission
        thres
        time
        title
        usergroup
        vuxml
        yesterday
    );

    return 1;
};

get '/' => sub {
    my ($self) = @_;

    my @stories;
    foreach my $story ( $self->stories ) {
        last if @stories == $config->{num_front_page_stories};

        if ($story->has_more) {
            $story->more( 'Read '
                . $self->link_to( more => "/article/$story" )
                . ' . . .' ) if $story->has_more;
        }

        push @stories, $story;
    }
    $self->stash( front_stories => \@stories );
} => 'front';

get '/about';
get '/errata';
get '/search';

get '/article/*id' => sub {
    my ($self) = @_;
    my $id = $self->param('id');
    $self->stash( story => $self->story($id) );
} => 'article';

get '/summary' => [ format => [qw( rss json )] ] => sub {
    my ($self) = @_;

    my @required = qw(
        id
        subject
        link
        department
        body
    );
    my @allowed = ( @required, qw(
        date
        name
        host
        has_more
    ) );

    my $clean_it;
    $clean_it = sub {
        my ($post) = @_;
        my %clean;

        $clean{link} = $self->url_for("/article/$post")->to_abs;

        foreach my $key (@allowed) {
            next unless $post->can($key);
            my $value = $post->$key;
            next unless defined $value;
            $clean{$key} = $value;
        }

        $clean{pubdate} = delete $clean{date};

        $clean{mod}{score} = $post->mod->score;
        $clean{mod}{votes} = $post->mod->votes;

        if ($post->is_article) {
            @{ $clean{comments} } = map +{ $clean_it->($_) },
                @{ $post->comments };
        }

        return %clean;
    };

    my @stories;
    foreach my $story ( $self->stories ) {
        my %story = $clean_it->( $story );
        $story{$_} //= undef for @required;
        push @stories, \%story;
        last if @stories == $config->{num_rss_stories};
    }

    return $self->render( json => \@stories )
        if $self->stash('format') eq 'json';

    $self->stash( stories => \@stories );
};

get '/submit';
post '/submit';

get '/deauth';
get '/login';
post '/login';

get '/register';
post '/register';

get '/prefs';
post '/prefs';

get '/submissions';
post '/edit';

app->start;
